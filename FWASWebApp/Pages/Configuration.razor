@page "/Configuration"
@using FWASWebApp.Services
@using FWASWebApp.ResponseModels.View
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager


<style>
    .waiting {
    	background: repeating-linear-gradient(to left, #fff, #ddd);
    	animation: load 5s linear infinite forwards;
    	background-size: 200% auto;
    }
    	
    @@keyframes load {
        0% { background-position: -200% 0; }
      100% { background-position: 0 0; }
    }
    
    .card-container {
        position: relative;
        width: 15rem;
        height: 15rem;
    }
    
    .bottom-display {
        position: absolute;
        bottom: 0.7rem;
        right: 0.7rem;
    }
    .prompt {
        font-size: 20px;
    }
            
    .prompt > * {
        margin: 0.5rem 0;
        padding: 0.5rem 0;
    }
    
    .pickbox {
        font-size: 14px; 
        border: 1px solid black; 
        border-radius: 2px;
        display: inline-flex; 
        background: #ccc;
        padding: 2px;
    }
    
    .pickbox .remove {
        margin-left: 2px;
        width: 12px;
        height: 12px;
        display: inline-block;
    }
    
    .info-card {
        padding: 4px;
        border: 2px solid #005a9e;
        background: #9fd3e3;
        border-radius: 4px;
    }
</style>

<div style="margin-left: 10vw; margin-right: 10vw;">
    <h2>College Configuration</h2>
    <br/>

    @if (_session is null) {
        <CardLayout ChildrenHeight="10rem"
                    ChildrenWidth="15rem">
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
        </CardLayout>
    }
    else {
        <h3>Primary Configurations</h3>
        <input type="checkbox" @bind="_config.IsUG" disabled/>
        <span>UG</span>
        <input type="checkbox" @bind="_config.IsPG" disabled/>
        <span>PG</span>
        <br/>
        <h3>Access Designations</h3>
        <CardLayout>
            @foreach (var access in _config.designations) {
                <Card>
                    <div class="card-container" @onclick="() => { Edit(access); }">
                        <h2>@access.title</h2>
                        @foreach (var cd in access.codes) {
                            <h4 style="font-weight: normal">@cd.name</h4>
                        }
                    </div>
                </Card>
            }
            <Card>
                <div style='position: relative; width: 100%; height: 100%;' @onclick="Add">
                    <h3 style='position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%); text-align: center;'>
                        <svg focusable="false"
                             viewBox="0 0 512 512"
                             width="80px"
                             xmlns="http://www.w3.org/2000/svg">
                            <path d="M384 250v12c0 6.6-5.4 12-12 12h-98v98c0 6.6-5.4 12-12 12h-12c-6.6 0-12-5.4-12-12v-98h-98c-6.6 0-12-5.4-12-12v-12c0-6.6 5.4-12 12-12h98v-98c0-6.6 5.4-12 12-12h12c6.6 0 12 5.4 12 12v98h98c6.6 0 12 5.4 12 12zm120 6c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-32 0c0-119.9-97.3-216-216-216-119.9 0-216 97.3-216 216 0 119.9 97.3 216 216 216 119.9 0 216-97.3 216-216z">
                            </path>
                        </svg><br/>
                        Add new?
                    </h3>
                </div>
            </Card>
        </CardLayout>
    }
</div>

<PromptPane Dismissible="true"
            Title="@_windowTitle"
            PrimaryText="Finish"
            SecondaryText="Cancel"
            Visible="@_promptVisibility"
            OnClickPrimary="@Set"
            OnClickSecondary="@Hide">
    @if (_institution != null) {
        <div class="prompt">
            Title: <input type="text" @bind="_designationObject.title"/> <br/>
            Access Codes:
            <div>
                @foreach (var acc in _designationObject.codes) {
                    <div class="pickbox">
                        @(_config.accessCodes.Find(e => e.code == acc)?.name)
                        <div class="remove" @onclick="() => { RemoveFromList(acc); StateHasChanged();}">
                            <!-- Microsoft FluentUI icons -->
                            <svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1"
                                 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
                                <title>Remove</title>
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <g id="ic_fluent_dismiss_16_regular" fill="#212121" fill-rule="nonzero">
                                        <path d="M2.58859116,2.7156945 L2.64644661,2.64644661 C2.82001296,2.47288026 3.08943736,2.45359511 3.2843055,2.58859116 L3.35355339,2.64644661 L8,7.293 L12.6464466,2.64644661 C12.8417088,2.45118446 13.1582912,2.45118446 13.3535534,2.64644661 C13.5488155,2.84170876 13.5488155,3.15829124 13.3535534,3.35355339 L8.707,8 L13.3535534,12.6464466 C13.5271197,12.820013 13.5464049,13.0894374 13.4114088,13.2843055 L13.3535534,13.3535534 C13.179987,13.5271197 12.9105626,13.5464049 12.7156945,13.4114088 L12.6464466,13.3535534 L8,8.707 L3.35355339,13.3535534 C3.15829124,13.5488155 2.84170876,13.5488155 2.64644661,13.3535534 C2.45118446,13.1582912 2.45118446,12.8417088 2.64644661,12.6464466 L7.293,8 L2.64644661,3.35355339 C2.47288026,3.17998704 2.45359511,2.91056264 2.58859116,2.7156945 L2.64644661,2.64644661 L2.58859116,2.7156945 Z" id="ðŸŽ¨-Color"></path>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                }
            </div><br/>
            <select @bind="_pickedCode">
                <option value="@_config.accessCodes[0].code" selected>@_config.accessCodes[0].name</option>
                @for (var i = 1; i < _config.accessCodes.Count; i++) {
                    <option value="@_config.accessCodes[i].code">@_config.accessCodes[i].name</option>
                }
            </select>
            <Button Color="Colored" OnClick="@AddToList">+</Button>
        </div>
    }
</PromptPane>


@code{

    Session _session;
    ViewCollegeConfigResponseModel _config;
    Institution _institution;
    ViewApi.CollegeConfigRequestModel _collegeConfigRequestModel;
    string _windowTitle;
    bool _promptVisibility;
    ViewApi.Designation _designationObject;
    int _pickedCode;


    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _session ??= SessionManager.GetSession(await LocalStorage.GetItemAsync<string>(Constants.SessionId));
            if (_session is null) {
                NavigationManager.NavigateTo("/");
                return;
            }
            _institution = InstitutionManager.GetInstitution(_session.InstitutionId);
            _config = await _institution.GetCollegeConfigResponse();
            _collegeConfigRequestModel = new ViewApi.CollegeConfigRequestModel {
                institutionID = _session.InstitutionId,
                IsPG = _config.IsPG,
                IsUG = _config.IsUG,
                minimumWorkingDaysEvenSemester = 0,
                minimumWorkingDaysOddSemester = 0,
                designations = new List<ViewApi.Designation>()
            };
            _designationObject = new ViewApi.Designation {codes = new List<int>()};
            StateHasChanged();
        }
    }

    private void Add() {
        _windowTitle = "Add Designation";
        _pickedCode = 0;
        _designationObject = new ViewApi.Designation {codes = new List<int>()};
        _promptVisibility = true;
    }

    private async void Set() {
        _collegeConfigRequestModel.designations = new List<ViewApi.Designation> {_designationObject};
        await ViewApi.UpdateConfig(_collegeConfigRequestModel);
        _config = await _institution.GetCollegeConfigResponse();
        _promptVisibility = false;
    }

    private void Hide() {
        _promptVisibility = false;
    }

    private void Edit(Designations designations) {
        _windowTitle = "Edit Designation";
        _collegeConfigRequestModel.designations = new List<ViewApi.Designation>();
    // type issues with: ViewApi.Designation and View.Designations (in ViewDesignationResponseModel)
        var designation = new ViewApi.Designation {
            title = designations.title,
            id = designations.id,
            codes = designations.codes
                .Select(e => e.code)
                .ToList()
        };
        
        _designationObject = designation;
        _promptVisibility = true;
    }

    void RemoveFromList(int cd) {
        _designationObject.codes.Remove(cd);
    }

    void AddToList() {
        if(_designationObject.codes.Contains(_pickedCode)) return;
        _designationObject.codes.Add(_pickedCode);
        _pickedCode = 0;
    }

}