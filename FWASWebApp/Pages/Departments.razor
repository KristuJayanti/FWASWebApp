@using FWASWebApp.Services
@using FWASWebApp.ResponseModels.Manager
@using FWASWebApp.ResponseModels.View
@using FWASWebApp.Services.ManagerApi
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager;

<style>
    .waiting {
    	background: repeating-linear-gradient(to left, #fff, #ddd);
    	animation: load 5s linear infinite forwards;
    	background-size: 200% auto;
    }
    	
    @@keyframes load {
        0% { background-position: -200% 0; }
      100% { background-position: 0 0; }
    }
    
    .card-container {
        position: relative;
        width: 15rem;
        height: 15rem;
    }
    
    .bottom-display {
        position: absolute;
        bottom: 0.7rem;
        right: 0.7rem;
    }
    
    .prompt {
        font-size: 20px;
    }
        
    .prompt > * {
        margin: 0.5rem 0;
        padding: 0.5rem 0;
    }
    
    .pickbox {
        font-size: 14px; 
        border: 1px solid black; 
        border-radius: 2px;
        display: inline-flex; 
        background: #ccc;
        padding: 2px;
    }
        
    .pickbox .remove {
        margin-left: 2px;
        width: 12px;
        height: 12px;
        display: inline-block;
    }
        
    .info-card {
        padding: 4px;
        border: 2px solid #005a9e;
        background: #9fd3e3;
        border-radius: 4px;
    }
</style>

<h1 style='padding-left: 10vw;'>Departments</h1>


@* Placeholder loading *@
<div style="display: @(_session == null ? "block" : "none"); margin-left: 10vw;">
    <CardLayout ChildrenHeight="10rem"
                ChildrenWidth="15rem">
        <Card>
            <div class="waiting" style="width: 10rem; height: 2rem;"></div>
            <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
        </Card>
        <Card>
            <div class="waiting" style="width: 10rem; height: 2rem;"></div>
            <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
        </Card>
    </CardLayout>
</div>

@* actual logic *@

<div style="display: @(_session == null ? "none" : "block"); margin-left: 10vw;">

    <CardLayout ChildrenHeight="10rem"
                ChildrenWidth="15rem">
        @if (_departments != null) {
            foreach (var department in _departments) {
                <Card>
                    <div class="card-container" @onclick="@(() => Edit(department))">
                        <h2>@department.departmentName</h2>
                        <h4>Deanery: @(_institution.GetDeaneryById(department.deaneryId).deaneryName ?? "Unknown")</h4>
                        <h4 style="font-weight: normal" class="bottom-display">
                            @if (department.IsUG) {
                                <span>UG</span>
                            }
                            @if (department.IsPG) {
                                <span>PG</span>
                            }
                        </h4>
                    </div>
                </Card>
            }
        }
        <Card>
            <div style="position: relative; width: 100%; height: 100%;" @onclick="Add">
                <h3 style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%)">
                    <svg aria-hidden="true"
                         class="fa-plus-circle fa-w-16 svg-inline--fa"
                         data-icon="plus-circle"
                         data-prefix="fal"
                         focusable="false"
                         role="img"
                         viewBox="0 0 512 512"
                         width="80px"
                         xmlns="http://www.w3.org/2000/svg">
                        <path class=""
                              d="M384 250v12c0 6.6-5.4 12-12 12h-98v98c0 6.6-5.4 12-12 12h-12c-6.6 0-12-5.4-12-12v-98h-98c-6.6 0-12-5.4-12-12v-12c0-6.6 5.4-12 12-12h98v-98c0-6.6 5.4-12 12-12h12c6.6 0 12 5.4 12 12v98h98c6.6 0 12 5.4 12 12zm120 6c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-32 0c0-119.9-97.3-216-216-216-119.9 0-216 97.3-216 216 0 119.9 97.3 216 216 216 119.9 0 216-97.3 216-216z"
                              fill="currentColor">
                        </path>
                    </svg>
                    <br/>
                    Add new?
                </h3>
            </div>
        </Card>
    </CardLayout>

</div>

<PromptPane Dismissible="true"
            Title="@_windowTitle"
            PrimaryText="Finish"
            SecondaryText="Cancel"
            Visible="@_promptVisibility"
            OnClickPrimary="@Set"
            OnClickSecondary="@(()=>_promptVisibility=false)">
    <br/>
    @if (_institution != null) {
        <div class="prompt">
            <div class="info-card">Specify a Deanery Name. </div>
            Department Name: <input type="text" placeholder="Department" @bind="departmentObject.departmentName"/> <br/>
            <div class="info-card">Give this deanery a code. It could be a simple name to identify your department.</div>
            Department Code: <input type="text" placeholder="Department Code" @bind="departmentObject.departmentCode"/> <br/>

            <div class="info-card">Pick the deanery that this department belongs to.</div>
            Deanery:
            <select @bind="departmentObject.deaneryId">
                @for (var i = 0; i < _deaneries.Count; i++) {
                    <option selected="@(i==0 ? "selected": "false")" value="@_deaneries[i].id">@_deaneries[i].deaneryName</option>
                }
            </select><br/>

            <div class="info-card">Select if the department has UG or PG or both.</div>
            <input type="checkbox" @bind="departmentObject.IsUG"/>UG
            <input type="checkbox" @bind="departmentObject.IsPG"/>PG <br/>

            <div class="info-card">Where is this department?</div>
            Room:
            <select @bind="departmentObject.roomId">
                @for (var i = 0; i < _rooms.Count; i++) {
                    <option selected="@(i==0 ? "selected": "false")" value="@_rooms[i].id">@_rooms[i].roomCode</option>
                }
            </select><br/>

            <div class="info-card">Pick the access designations that the department will have.</div>
            Access Designations:<br/>
            <div>
                @foreach (var acc in addedDesignations) {
                    <div class="pickbox">
                        @acc.title
                        <div class="remove" @onclick="() => { RemoveFromList(acc); StateHasChanged();}">
                            <!-- Microsoft FluentUI icons -->
                            <svg width="16px" height="16px" viewBox="0 0 16 16"
                                 version="1.1" xmlns="http://www.w3.org/2000/svg"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">
                                <title>Remove</title>
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <g id="ic_fluent_dismiss_16_regular" fill="#212121" fill-rule="nonzero">
                                        <path d="M2.58859116,2.7156945 L2.64644661,2.64644661 C2.82001296,2.47288026 3.08943736,2.45359511 3.2843055,2.58859116 L3.35355339,2.64644661 L8,7.293 L12.6464466,2.64644661 C12.8417088,2.45118446 13.1582912,2.45118446 13.3535534,2.64644661 C13.5488155,2.84170876 13.5488155,3.15829124 13.3535534,3.35355339 L8.707,8 L13.3535534,12.6464466 C13.5271197,12.820013 13.5464049,13.0894374 13.4114088,13.2843055 L13.3535534,13.3535534 C13.179987,13.5271197 12.9105626,13.5464049 12.7156945,13.4114088 L12.6464466,13.3535534 L8,8.707 L3.35355339,13.3535534 C3.15829124,13.5488155 2.84170876,13.5488155 2.64644661,13.3535534 C2.45118446,13.1582912 2.45118446,12.8417088 2.64644661,12.6464466 L7.293,8 L2.64644661,3.35355339 C2.47288026,3.17998704 2.45359511,2.91056264 2.58859116,2.7156945 L2.64644661,2.64644661 L2.58859116,2.7156945 Z" id="🎨-Color"></path>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                }
            </div><br/>
            <select @bind="pickedDesignation.id">
                @for (var i = 0; i < _designations.Count; i++) {
                    <option selected="@(i == 0 ? "selected" : "false")" value="@_designations[i].id">@_designations[i].title</option>
                }
            </select>
            <Button Color="Colored" OnClick="@AddToList">+</Button>
            <br/>
            <div class="info-card">Once you are done, hit the 'Finish' button below.</div>
        </div>
    }
</PromptPane>


@code {

    public Department departmentObject { get; set; }
    public List<Designations> addedDesignations { get; set; }
    private Designations pickedDesignation { get; set; }
    private List<Designations> _designations;
    private string _windowTitle = "Add Department";
    Session _session;
    List<Department> _departments;
    List<Deanery> _deaneries;
    List<CollegeInfrastructureRoomResponseModel> _rooms;
    Institution _institution;
    private bool _promptVisibility;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _session ??= SessionManager.GetSession(await LocalStorage.GetItemAsync<string>(Constants.SessionId));
            if (_session is null) NavigationManager.NavigateTo("/");
            else {
                _institution = InstitutionManager.GetInstitution(_session.InstitutionId);
                _departments ??= await _institution.GetDepartments();
                _rooms ??= await _institution.GetCollegeRooms();
                addedDesignations = new List<Designations>();
                pickedDesignation = new Designations();
                departmentObject = new Department();
                _designations = await _institution.GetDesignations();
                _deaneries ??= await _institution.GetDeaneries();
                StateHasChanged();
            }
        }
    }
    
    private async Task Update() {
        _departments = await _institution.GetDepartments();
        StateHasChanged();
    }

    private void Add() {
        departmentObject = new Department();
        _promptVisibility = true;
        _windowTitle = "Add Department";
        addedDesignations = new List<Designations>();
        pickedDesignation = new Designations();
    }

    private void AddToList() {
        if (addedDesignations.Exists(e => e.id == pickedDesignation.id)) return;
        if (_designations.Exists(e => e.id == pickedDesignation.id))
            addedDesignations.Add(_designations.Find(e => e.id == pickedDesignation.id));
        pickedDesignation = new Designations();
    }

    private void RemoveFromList(Designations item) {
        addedDesignations.RemoveAll(e => e.id == item.id);
    }

    private async Task Set() {
        departmentObject.accessDesignation = addedDesignations
            .Select(addedDesignation => addedDesignation.id)
            .ToList();
        await DepartmentApi.Add(_session.InstitutionId, departmentObject);
        _promptVisibility = false;
        await Update();
    }

    private void Edit(Department department) {
        _windowTitle = $"Edit Department: {department.departmentName}";
        departmentObject = department;
        addedDesignations = new List<Designations>();
        foreach (var designation in departmentObject.accessDesignation) {
            addedDesignations.Add(_designations.Find(e => e.id == designation));
        }
        _promptVisibility = true;
    }
}