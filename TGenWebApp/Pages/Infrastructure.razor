@page "/Infrastructure"
@using TGenWebApp.Services
@using TGenWebApp.ResponseModels.Manager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<style>
	.waiting {
		background: repeating-linear-gradient(to left, #fff, #ddd);
		animation: load 5s linear infinite forwards;
		background-size: 200% auto;
	}
	
	@@keyframes load {
        0% { background-position: -200% 0; }
      100% { background-position: 0 0; }
   }
   
    .card-container {
        position: relative;
        width: 15rem;
        height: 15rem;
    }
    
    .bottom-display {
        position: absolute;
        bottom: 0.7rem;
        right: 0.7rem;
    }
    
    .prompt {
        font-size: 20px;
    }
    
    .prompt > * {
        margin: 0.5rem 0;
        padding: 0.5rem 0;
    }
    
    .pickbox {
        font-size: 14px; 
        border: 1px solid black; 
        border-radius: 2px;
        display: inline-flex; 
        background: #ccc;
        padding: 2px;
    }
    
    .pickbox .remove {
        margin-left: 2px;
        width: 12px;
        height: 12px;
        display: inline-block;
    }
    
    .info-card {
        padding: 4px;
        border: 2px solid #005a9e;
        background: #9fd3e3;
        border-radius: 4px;
    }
</style>

<div style="margin-left: 10vw;">
    <h3>Preferences</h3>

    <h4 style="margin-left: 2rem;">Building</h4>

    @* Placeholder loading *@
    <div style="display: @(_session == null ? "block" : "none")">
        <CardLayout ChildrenHeight="10rem"
                    ChildrenWidth="15rem">
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
        </CardLayout>
    </div>

    <div style="display: @(_session is null ? "none" : "block");">
        <CardLayout ChildrenHeight="10rem" ChildrenWidth="15rem">
            @if (_building != null) {
                @foreach (var b in _building) {
                    <Card>
                        <div class="card-container" @onclick="@(() => { Edit(b); })">
                            <h2>@b.buildingName</h2>
                            <h3>Floors: @b.numberOfFloors</h3>
                        </div>
                    </Card>
                }
            }
            <Card>
                <div style="position: relative; width: 100%; height: 100%;" @onclick="AddBuilding">
                    <h3 style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%)">
                        <svg aria-hidden="true"
                             class="fa-plus-circle fa-w-16 svg-inline--fa"
                             data-icon="plus-circle"
                             data-prefix="fal"
                             focusable="false"
                             role="img"
                             viewBox="0 0 512 512"
                             width="80px"
                             xmlns="http://www.w3.org/2000/svg">
                            <path class=""
                                  d="M384 250v12c0 6.6-5.4 12-12 12h-98v98c0 6.6-5.4 12-12 12h-12c-6.6 0-12-5.4-12-12v-98h-98c-6.6 0-12-5.4-12-12v-12c0-6.6 5.4-12 12-12h98v-98c0-6.6 5.4-12 12-12h12c6.6 0 12 5.4 12 12v98h98c6.6 0 12 5.4 12 12zm120 6c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-32 0c0-119.9-97.3-216-216-216-119.9 0-216 97.3-216 216 0 119.9 97.3 216 216 216 119.9 0 216-97.3 216-216z"
                                  fill="currentColor">
                            </path>
                        </svg>
                        <br/>
                        Add new?
                    </h3>
                </div>
            </Card>
        </CardLayout>
    </div>


    <h4 style="margin-left: 2rem;">Rooms</h4>

    @* Placeholder loading *@
    <div style="display: @(_session == null ? "block" : "none")">
        <CardLayout ChildrenHeight="10rem"
                    ChildrenWidth="15rem">
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
        </CardLayout>
    </div>

    <div style="display: @(_session is null ? "none" : "block")">
        <CardLayout ChildrenHeight="10rem" ChildrenWidth="15rem">
            @if (_room != null) {
                @foreach (var b in _room) {
                    <Card>
                        <div class="card-container" @onclick="@(() => { EditRoom(b); })">
                            <h2>@b.roomCode</h2>
                            <h3>Type: @b.roomType</h3>
                            <h3>Building: @(_building.Find(e => b.buildingId == e.id).buildingName)</h3>
                        </div>
                    </Card>
                }
            }
            <Card>
                <div style="position: relative; width: 100%; height: 100%;" @onclick="AddRoom">
                    <h3 style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%)">
                        <svg aria-hidden="true"
                             class="fa-plus-circle fa-w-16 svg-inline--fa"
                             data-icon="plus-circle"
                             data-prefix="fal"
                             focusable="false"
                             role="img"
                             viewBox="0 0 512 512"
                             width="80px"
                             xmlns="http://www.w3.org/2000/svg">
                            <path class=""
                                  d="M384 250v12c0 6.6-5.4 12-12 12h-98v98c0 6.6-5.4 12-12 12h-12c-6.6 0-12-5.4-12-12v-98h-98c-6.6 0-12-5.4-12-12v-12c0-6.6 5.4-12 12-12h98v-98c0-6.6 5.4-12 12-12h12c6.6 0 12 5.4 12 12v98h98c6.6 0 12 5.4 12 12zm120 6c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-32 0c0-119.9-97.3-216-216-216-119.9 0-216 97.3-216 216 0 119.9 97.3 216 216 216 119.9 0 216-97.3 216-216z"
                                  fill="currentColor">
                            </path>
                        </svg>
                        <br/>
                        Add new?
                    </h3>
                </div>
            </Card>
        </CardLayout>
    </div>
</div>

<PromptPane Dismissible="true"
            Title="@_windowTitle"
            PrimaryText="Add"
            SecondaryText="Cancel"
            Visible="@_visibleBuilding"
            OnClickPrimary="@SetBuilding"
            OnClickSecondary="@HideBuilding">
    <br/>
    @if (_building != null) {
        <div class="prompt">
            Building Name: <input type="text" placeholder="Building Name" @bind="buildingObject.buildingName"/> <br/>
            Building Code: <input type="text" placeholder="Building Code" @bind="buildingObject.buildingCode"/> <br/>
            No of Floors: <input type="text" placeholder="Floors" @bind="buildingObject.numberOfFloors"/><br/>
        </div>
    }
</PromptPane>

<PromptPane Dismissible="true"
            Title="@_windowTitle"
            PrimaryText="Add"
            SecondaryText="Cancel"
            Visible="@_visibleRoom"
            OnClickPrimary="@SetRoom"
            OnClickSecondary="@HideRoom">
    <br/>
    @if (_room != null) {
        <div class="prompt">
            Room Code: <input type="text" @bind="roomObject.roomCode" required/> <br/>
            Room Type: <input type="text" @bind="roomObject.roomType" required/> <br/>
            Building:
            <select @bind="roomObject.buildingId">
                <option selected value="@_building[0].id">@_building[0].buildingName</option>
                @for (var i = 1; i < _building.Count; i++) {
                    <option value="@_building[i].id">@_building[i].buildingName</option>
                }
            </select><br/>
            Floor no.: <input type="text" placeholder="Floor Number" @bind="roomObject.floorNumber"/> <br/>
            <input type="checkbox" @bind="roomObject.IsLab"/> Lab
            <input type="checkbox" @bind="roomObject.IsUG"/> UG
            <input type="checkbox" @bind="roomObject.IsPG"/> PG <br/>
            Lab Type: <input type="text" disabled="@(!roomObject.IsLab)" @bind="roomObject.labType"/> <br/>
            Strength: <input type="text" placeholder="Room Strength" @bind="roomObject.maxStrength"/> <br/>
        </div>
    }
</PromptPane>

@code {

    private Session _session;
    private List<Building> _building;
    private List<CollegeInfrastructureRoomResponseModel> _room;
    public Building buildingObject;
    public RoomRequest roomObject;
    private Institution _institution;
    private bool _visibleBuilding, _visibleRoom;
    private string _windowTitle = "";

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _session ??= SessionManager.GetSession(await LocalStorage.GetItemAsync<string>(Constants.SessionId));
            if (_session is null)
                NavigationManager.NavigateTo("/");
            else {
                _institution = InstitutionManager.GetInstitution(_session.InstitutionId);
                _building ??= await _institution.GetCollegeBuildings();
                _room ??= await _institution.GetCollegeRooms();
                buildingObject = new Building();
                roomObject = new RoomRequest();
                StateHasChanged();
            }
        }
    }

    private void AddBuilding() {
        buildingObject = new Building();
        _windowTitle = "Add Building";
        _visibleBuilding = true;
        _visibleRoom = false;
    }

    private void AddRoom() {
        roomObject = new RoomRequest {buildingId = _building[0].id};
        _windowTitle = "Add Room";
        _visibleRoom = true;
        _visibleBuilding = false;
    }

    private async Task Update() {
        _building ??= await _institution.GetCollegeBuildings();
        _room ??= await _institution.GetCollegeRooms();
        StateHasChanged();
    }

    private void Edit(Building building) {
        _windowTitle = $"Edit Building {building.buildingName}";
        buildingObject = building;
        _visibleBuilding = true;
        _visibleRoom = false;
    }

    private void EditRoom(CollegeInfrastructureRoomResponseModel room) {
        _windowTitle = $"Edit Room {room.id}";
        roomObject = new RoomRequest {
            id = room.id,
            buildingId = room.buildingId,
            floorNumber = room.floorNumber,
            IsLab = room.IsLab,
            IsPG = room.IsPG,
            IsUG = room.IsUG,
            labType = room.labType,
            maxStrength = room.maxStrength,
            roomCode = room.roomCode,
            roomType = room.roomType
        };
        _visibleRoom = true;
        _visibleBuilding = false;
    }

    private async Task SetBuilding() {
        await ViewApi.AddCollegeBuilding(_session.InstitutionId, buildingObject);
        _building = null;
        _visibleBuilding = false;
        await Update();
    }

    private async Task SetRoom() {
        if (!roomObject.IsLab) roomObject.labType = "";
        await ViewApi.AddCollegeRoom(_session.InstitutionId, roomObject);
        _room = null;
        _visibleRoom = false;
        await Update();
    }

    private void HideRoom() {
        _visibleRoom = false;
    }

    private void HideBuilding() {
        _visibleBuilding = false;
    }

}