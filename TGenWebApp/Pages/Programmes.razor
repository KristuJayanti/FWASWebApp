@page "/Manage/Programmes";
@using TGenWebApp.Services
@using TGenWebApp.ResponseModels.Manager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;
@inject NavigationManager NavigationManager;

<style>
    .waiting {
    	background: repeating-linear-gradient(to left, #fff, #ddd);
    	animation: load 5s linear infinite forwards;
    	background-size: 200% auto;
    }
    	
    @@keyframes load {
        0% { background-position: -200% 0; }
      100% { background-position: 0 0; }
    }
    
    .card-container {
        position: relative;
        width: 15rem;
        height: 15rem;
    }
    
    .bottom-display {
        position: absolute;
        bottom: 0.7rem;
        right: 0.7rem;
    }
</style>

<h1 style='padding-left: 10vw;'>Programmes</h1>

@* Placeholder loading *@
<div style="display: @(_session == null ? "block" : "none")">
    <CardLayout ChildrenHeight="10rem"
                ChildrenWidth="15rem">
        <Card>
            <div class="waiting" style="width: 10rem; height: 2rem;"></div>
            <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
        </Card>
        <Card>
            <div class="waiting" style="width: 10rem; height: 2rem;"></div>
            <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
        </Card>
    </CardLayout>
</div>

@* actual logic *@

<div style="display: @(_session == null ? "none" : "block")">

    <CardLayout ChildrenHeight="10rem"
                ChildrenWidth="15rem">
        @if (_programmes != null) {
            foreach (var programme in _programmes) {
                <Card>
                    <div class="card-container">
                        <h2>@programme.programmeName</h2>
                        <h3>@(programme.workingHoursPerWeek ?? 0) hours/wk</h3>
                        <div class="bottom-display">
                            
                            @if (programme.IsUG ?? false) {
                                <span>UG</span>
                            }
                            else {
                                <span>PG</span>
                            }
                        </div>
                    </div>
                </Card>
            }
        }
    </CardLayout>
</div>

@code{

    private Session _session;
    private Institution _institution;
    private List<Programme> _programmes;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _session ??= SessionManager.GetSession(await LocalStorage.GetItemAsync<string>(Constants.SessionId));
            if (_session is null) NavigationManager.NavigateTo("/");
            else {
                _institution = InstitutionManager.GetInstitution(_session.InstitutionId);
                _programmes = await _institution.GetProgrammes();
            }
            StateHasChanged();
        }
    }

}
