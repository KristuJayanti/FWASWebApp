@using TGenWebApp.Services
@using TGenWebApp.ResponseModels.View
@using TGenWebApp.ResponseModels.Manager
@using BlazorInputFile
@using TGenWebApp.Services.ManagerApi
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager

<h1 style="padding-left: 10vw;">Faculty</h1>

<style>
    .waiting {
    	background: repeating-linear-gradient(to left, #fff, #ddd);
    	animation: load 5s linear infinite forwards;
    	background-size: 200% auto;
    }
    	
    @@keyframes load {
        0% { background-position: -200% 0; }
      100% { background-position: 0 0; }
    }
    
    .card-container {
        position: relative;
        width: 15rem;
        height: 15rem;
    }
    
    .bottom-display {
        position: absolute;
        bottom: 0.7rem;
        right: 0.7rem;
    }
    
    .prompt {
        font-size: 20px;
    }
    
    .prompt > * {
        margin: 0.5rem 0;
        padding: 0.5rem 0;
    }
    
    .pickbox {
        font-size: 14px; 
        border: 1px solid black; 
        border-radius: 2px;
        display: inline-flex; 
        background: #ccc;
        padding: 2px;
    }
    
    .pickbox .remove {
        margin-left: 2px;
        width: 12px;
        height: 12px;
        display: inline-block;
    }
    
    .info-card {
        padding: 4px;
        border: 2px solid #005a9e;
        background: #9fd3e3;
        border-radius: 4px;
    }
</style>

@* Placeholder loading animation *@
<div style="display: @(_session == null ? "block" : "none"); margin-left: 10vw;">
    <CardLayout ChildrenHeight="10rem"
                ChildrenWidth="15rem">
        <Card>
            <div class="waiting" style="width: 10rem; height: 2rem;"></div>
            <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
        </Card>
        <Card>
            <div class="waiting" style="width: 10rem; height: 2rem;"></div>
            <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
        </Card>
    </CardLayout>
</div>

@* Actual Code *@
<div style="display: @(_session is null ? "none" : "block"); margin-left: 10vw;">

    <CardLayout ChildrenHeight="10rem"
                ChildrenWidth="15rem">

        @if (_faculties != null) {
            @foreach (var faculty in _faculties) {
                <Card>
                    <div class="card-container">
                        <h2>@faculty.name</h2>
                        <h3 style="padding-left: 0.5rem;">@faculty.jobId</h3>
                    </div>
                </Card>
            }
        }
        <Card>
            <div style="position: relative; width: 100%; height: 100%;" @onclick="Add">
                <h3 style="position: absolute; top: 40%; left: 50%; transform: translate(-50%, -50%)">
                    <svg aria-hidden="true"
                         class="fa-plus-circle fa-w-16 svg-inline--fa"
                         data-icon="plus-circle"
                         data-prefix="fal"
                         focusable="false"
                         role="img"
                         viewBox="0 0 512 512"
                         width="80px"
                         xmlns="http://www.w3.org/2000/svg">
                        <path class=""
                              d="M384 250v12c0 6.6-5.4 12-12 12h-98v98c0 6.6-5.4 12-12 12h-12c-6.6 0-12-5.4-12-12v-98h-98c-6.6 0-12-5.4-12-12v-12c0-6.6 5.4-12 12-12h98v-98c0-6.6 5.4-12 12-12h12c6.6 0 12 5.4 12 12v98h98c6.6 0 12 5.4 12 12zm120 6c0 137-111 248-248 248S8 393 8 256 119 8 256 8s248 111 248 248zm-32 0c0-119.9-97.3-216-216-216-119.9 0-216 97.3-216 216 0 119.9 97.3 216 216 216 119.9 0 216-97.3 216-216z"
                              fill="currentColor">
                        </path>
                    </svg>
                    <br/>
                    Add new?
                </h3>
            </div>
        </Card>
    </CardLayout>

</div>


<PromptPane Dismissible="true"
            Title="Add Faculty"
            PrimaryText="Add"
            SecondaryText="Cancel"
            Visible="@_promptVisibility"
            OnClickPrimary="@Set"
            OnClickSecondary="@Hide">
    <br/>
    @if (_institution != null) {
        <div class="prompt">
            Name:
            <input type="text"
                   placeholder="Name" @bind="facultyObject.name"><br/>
            Job ID:
            <input type="text" placeholder="Job ID" @bind="facultyObject.jobId"/> <br/>
            Reset Password:
            <input type="button" disabled="@facultyObject.passwordReset"
                   @onclick="@(() => { facultyObject.passwordReset = true; })" value="Reset Password"/><br/>
            Department:
            <select @bind="facultyObject.departmentId">
                @for (var i = 0; i < _departments.Count; i++) {
                    <option selected="@(i == 0 ? "selected" : "false")"
                            value="@_departments[i].id">
                        @_departments[i].departmentName
                    </option>
                }
            </select>
            <br/>
            Access Designations:<br/>
            <div>
                @foreach (var acc in addedDesignations) {
                    <div class="pickbox">
                        @acc.title
                        <div class="remove" @onclick="() => { RemoveFromList(acc); StateHasChanged();}">
                            <!-- Microsoft FluentUI icons -->
                            <svg width="16px" height="16px" viewBox="0 0 16 16" version="1.1"
                                 xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                 style="padding-right: 1px;">
                                <title>Remove</title>
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <g fill="#212121" fill-rule="nonzero">
                                        <path d="M2.58859116,2.7156945 L2.64644661,2.64644661 C2.82001296,2.47288026 3.08943736,2.45359511 3.2843055,2.58859116 L3.35355339,2.64644661 L8,7.293 L12.6464466,2.64644661 C12.8417088,2.45118446 13.1582912,2.45118446 13.3535534,2.64644661 C13.5488155,2.84170876 13.5488155,3.15829124 13.3535534,3.35355339 L8.707,8 L13.3535534,12.6464466 C13.5271197,12.820013 13.5464049,13.0894374 13.4114088,13.2843055 L13.3535534,13.3535534 C13.179987,13.5271197 12.9105626,13.5464049 12.7156945,13.4114088 L12.6464466,13.3535534 L8,8.707 L3.35355339,13.3535534 C3.15829124,13.5488155 2.84170876,13.5488155 2.64644661,13.3535534 C2.45118446,13.1582912 2.45118446,12.8417088 2.64644661,12.6464466 L7.293,8 L2.64644661,3.35355339 C2.47288026,3.17998704 2.45359511,2.91056264 2.58859116,2.7156945 L2.64644661,2.64644661 L2.58859116,2.7156945 Z" id="🎨-Color"></path>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                }
            </div><br/>
            <select @bind="pickedDesignation.id">
                @for (var i = 0; i < _designations.Count; i++) {
                    <option selected="@(i == 0 ? "selected" : "false")" value="@_designations[i].id">@_designations[i].title</option>
                }
            </select>
            <Button Color="Colored" OnClick="@AddToList">+</Button>
            <br/>
            Email:
            <input type="text" placeholder="Email" @bind="facultyObject.emailId"/><br/>
            <input type="checkbox" @bind="facultyObject.IsTeaching"/> Teacher <br/>
            Phone Number: <input type="tel" placeholder="Phone" @bind="facultyObject.phoneNumber"/><br/>
            Address: <textarea cols="15" rows="3" placeholder="Address" @bind="facultyObject.address"></textarea> <br/>
            PIN Code: <input type="text" placeholder="PIN Code" @bind="facultyObject.pincode"/>
            Max Hours per week: <input type="number" placeholder="Hours/wk" @bind="facultyObject.MaxHoursPerWeek"/> <br/>
            Photo:
            <div style="display: inline-block;">
                <div style="display: @(facultyObject.photo is null ? "none" : "block"); width: 15px; height: 15px;">
                    <svg xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg"
                         viewBox="0 0 48 48">
                        <defs id="defs4638">
                            <linearGradient id="0" gradientUnits="userSpaceOnUse" y1="47.85" x2="0" y2="-2.292">
                                <stop stop-color="#4da70e" id="stop4633"/>
                                <stop offset="1" stop-color="#9ded46" id="stop4635"/>
                            </linearGradient>
                        </defs>
                        <g transform="matrix(.92307 0 0 .92307-24.891 2.712)" enable-background="new" id="g4644" style="fill-opacity:1;opacity:1;fill-rule:nonzero">
                            <circle r="26" cy="23.07" cx="52.97" fill="url(#0)" id="circle4640" style="fill-opacity:1;fill-rule:nonzero;fill:#55d400"/>
                            <path d="m66.804 16.712l-2.518-2.518c-.345-.346-.766-.518-1.259-.518-.494 0-.914.173-1.259.518l-12.148 12.167-5.444-5.463c-.346-.346-.766-.518-1.259-.518-.494 0-.914.173-1.259.518l-2.518 2.518c-.346.346-.518.766-.518 1.259 0 .494.173.914.518 1.259l6.704 6.704 2.519 2.518c.345.346.765.518 1.259.518.494 0 .914-.173 1.259-.518l2.519-2.518 13.407-13.407c.345-.346.518-.766.518-1.259 0-.494-.173-.914-.518-1.259" fill="#fff" fill-opacity=".851" id="path4642" style="fill-opacity:1;fill-rule:nonzero"/>
                        </g>
                    </svg>
                </div>
                <InputFile OnChange="HandleFileSelected"/>
            </div>
        </div>
    }
</PromptPane>

@code {

    private Session _session;
    private List<ViewCollegeFacultiesResponseModel> _faculties;
    private ResponseModels.Manager.Faculty facultyObject;
    private Institution _institution;
    private List<Department> _departments;
    private bool _promptVisibility;
    private List<Designations> addedDesignations { get; set; }
    private Designations pickedDesignation { get; set; }
    private List<Designations> _designations;

    private async Task HandleFileSelected(IFileListEntry[] files) {
        var file = files.FirstOrDefault();
        if (file != null) {
            var ms = await file.ReadAllAsync();
            var bytes = ms.ToArray();
            facultyObject.photo = Convert.ToBase64String(bytes);
        }
        else facultyObject.photo = null;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _session ??= SessionManager.GetSession(await LocalStorage.GetItemAsync<string>(Constants.SessionId));
            if (_session != null) {
                _institution = InstitutionManager.GetInstitution(_session.InstitutionId);
                _faculties = await _institution.GetCollegeFaculties();
                facultyObject = new ResponseModels.Manager.Faculty();
                addedDesignations = new List<Designations>();
                pickedDesignation = new Designations();
                _designations = await _institution.GetDesignations();
                _departments = await _institution.GetDepartments();
            }
            StateHasChanged();
        }
    }

    private void Add() {
        _promptVisibility = true;
        StateHasChanged();
    }

    private async Task Set() {
        facultyObject.institutionID = _session.InstitutionId;
        facultyObject.designationIds = addedDesignations
            .Select(addedDesignation => addedDesignation.id)
            .ToList();
        await FacultyApi.Add(_session.InstitutionId, facultyObject);
        _promptVisibility = false;
        await Update();
    }

    private async Task Update() {
        _faculties = await _institution.GetCollegeFaculties();
        StateHasChanged();
    }

    private void AddToList() {
        if (addedDesignations.Exists(e => e.id == pickedDesignation.id)) return;
        if (_designations.Exists(e => e.id == pickedDesignation.id))
            addedDesignations.Add(_designations.Find(e => e.id == pickedDesignation.id));
        pickedDesignation = new Designations();
    }

    private void Hide() {
        _promptVisibility = false;
    }

    private void RemoveFromList(Designations item) {
        addedDesignations.RemoveAll(e => e.id == item.id);
    }

    private async Task EditWindow(ViewCollegeConfigResponseModel faculty) { }

}