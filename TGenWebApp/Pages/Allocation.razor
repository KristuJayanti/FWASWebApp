@page "/Allocation"
@using TGenWebApp.Services
@using TGenWebApp.ResponseModels.Manager
@using TGenWebApp.ResponseModels.View
@using TGenWebApp.Services.AllocationApi
@using System.ComponentModel.Design
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<style>
    .waiting {
    	background: repeating-linear-gradient(to left, #fff, #ddd);
    	animation: load 5s linear infinite forwards;
    	background-size: 200% auto;
    }
    	
    @@keyframes load {
        0% { background-position: -200% 0; }
      100% { background-position: 0 0; }
    }
    
    .card-container {
        position: relative;
        width: 15rem;
        height: 15rem;
    }
    
    .bottom-display {
        position: absolute;
        bottom: 0.7rem;
        right: 0.7rem;
    }
    
    .prompt {
        font-size: 20px;
    }
    
    .prompt > * {
        margin: 0.5rem 0;
        padding: 0.5rem 0;
    }
    
    .pickbox {
        font-size: 14px; 
        border: 1px solid black; 
        border-radius: 2px;
        display: inline-flex; 
        background: #ccc;
        padding: 2px;
    }
    
    .pickbox .remove {
        margin-left: 2px;
        width: 12px;
        height: 12px;
        display: inline-block;
    }
    
    .info-card {
        padding: 4px;
        border: 2px solid #005a9e;
        background: #9fd3e3;
        border-radius: 4px;
    }
</style>

<h1 style="padding-left: 10vw;">Allocation</h1>
<h3 style="padding-left: 11vw; font-weight: normal">Allocate your faculty with courses.</h3>

<div style="padding-left: 10vw;">
    @if (_session is null) {
        <CardLayout ChildrenHeight="10rem"
                    ChildrenWidth="15rem">
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
            <Card>
                <div class="waiting" style="width: 10rem; height: 2rem;"></div>
                <div class="waiting" style="width: 8rem; height: 1rem; padding-left: 1rem; margin-top: 1rem;"></div>
            </Card>
        </CardLayout>
    }
    else {
        <CardLayout ChildrenHeight="10rem"
                    ChildrenWidth="15rem">
            @foreach (var viewFaculty in _viewFaculties) {
                <Card>
                    <div class="card-container" @onclick="() => { Edit(viewFaculty); }">
                        <h2>@viewFaculty.FacultyName</h2>
                        @if (viewFaculty.SelectedCourses.Count == 0) {
                            <h3>Courses not set yet.</h3>
                        }
                        else {
                            <h3>Handles @viewFaculty.SelectedCourses.Count.ToString() courses.</h3>
                        }
                    </div>
                </Card>
            }
        </CardLayout>
    }
</div>

<PromptPane Dismissible="true"
            Title="Pick Preferred Courses"
            PrimaryText="Done"
            SecondaryText="Cancel"
            Visible="@_promptVisibility"
            OnClickPrimary="@Set"
            OnClickSecondary="@Hide">
    <br/>
    @if (viewFacultyObject != null) {
        <div class="prompt">
            Courses for @viewFacultyObject.FacultyName:<br/>
            <div>
                @foreach (var acc in viewFacultyObject.SelectedCourses) {
                    <div class="pickbox">
                        @acc.courseName
                        <div class="remove" @onclick="() => { RemoveFromList(acc); }">
                            <!-- Microsoft FluentUI icons -->
                            <svg width="16px" height="16px" viewBox="0 0 16 16"
                                 xmlns="http://www.w3.org/2000/svg"
                                 xmlns:xlink="http://www.w3.org/1999/xlink">
                                <title>Remove</title>
                                <g stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                    <g id="ic_fluent_dismiss_16_regular" fill="#212121" fill-rule="nonzero">
                                        <path d="M2.58859116,2.7156945 L2.64644661,2.64644661 C2.82001296,2.47288026 3.08943736,2.45359511 3.2843055,2.58859116 L3.35355339,2.64644661 L8,7.293 L12.6464466,2.64644661 C12.8417088,2.45118446 13.1582912,2.45118446 13.3535534,2.64644661 C13.5488155,2.84170876 13.5488155,3.15829124 13.3535534,3.35355339 L8.707,8 L13.3535534,12.6464466 C13.5271197,12.820013 13.5464049,13.0894374 13.4114088,13.2843055 L13.3535534,13.3535534 C13.179987,13.5271197 12.9105626,13.5464049 12.7156945,13.4114088 L12.6464466,13.3535534 L8,8.707 L3.35355339,13.3535534 C3.15829124,13.5488155 2.84170876,13.5488155 2.64644661,13.3535534 C2.45118446,13.1582912 2.45118446,12.8417088 2.64644661,12.6464466 L7.293,8 L2.64644661,3.35355339 C2.47288026,3.17998704 2.45359511,2.91056264 2.58859116,2.7156945 L2.64644661,2.64644661 L2.58859116,2.7156945 Z" id="🎨-Color"></path>
                                    </g>
                                </g>
                            </svg>
                        </div>
                    </div>
                }
            </div>
            Preferred Courses:
            @if (viewFacultyObject.PreferredCourses.Count == 0) {
                <h5 style="font-weight: lighter">This user has not picked their Preferred Courses yet.</h5>
            }else {
                <div>
                <select @bind="temp2.Id">
                    <option value="@viewFacultyObject.PreferredCourses[0].Id" selected>@viewFacultyObject.PreferredCourses[0].courseName</option>
                    @for (var i = 1; i < viewFacultyObject.PreferredCourses.Count; i++) {
                        <option value="@viewFacultyObject.PreferredCourses[i].Id">@viewFacultyObject.PreferredCourses[i].courseName</option>
                    }
                </select>
                <Button Color="Colored" OnClick="@AddChoiceToList">+</Button><br/>
                </div>
            }
            All Courses:
            <select @bind="temp.Id">
                <option value="@_courses[0].Id" selected>@_courses[0].courseName</option>
                @for (var i = 1; i < _courses.Count; i++) {
                    <option value="@_courses[i].Id">@_courses[i].courseName</option>
                }
            </select>
            <Button Color="Colored" OnClick="@AddCourseToList">+</Button><br/>
        </div>
    }
</PromptPane>

@code {

    class MappedSelectedCourse : SelectedCourse {
        public string FacultyName { get; set; }
        public List<Course> SelectedCourses { get; set; }
        public List<Course> PreferredCourses { get; set; }

        // protect against nulls
        public MappedSelectedCourse() {
            FacultyName = string.Empty;
            SelectedCourses = new List<Course>();
            PreferredCourses = new List<Course>();
        }
    }

    Session _session;
    Institution _institution;
    List<ViewCollegeFacultiesResponseModel> _faculties;
    List<Department> _departments;
    List<Course> _courses;
    List<MappedSelectedCourse> _viewFaculties;
    private bool _promptVisibility;
    MappedSelectedCourse viewFacultyObject;
    Course temp, temp2;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            _session ??= SessionManager.GetSession(await LocalStorage.GetItemAsync<string>(Constants.SessionId));
            if (_session is null) {
                NavigationManager.NavigateTo("/");
                return;
            }
            _institution = InstitutionManager.GetInstitution(_session.InstitutionId);
            _faculties = await _institution.GetCollegeFaculties();
            _departments = await _institution.GetDepartments();
            _courses = await _institution.GetCourses();
            _viewFaculties = new List<MappedSelectedCourse>();
            viewFacultyObject = null;
            temp = new Course();
            temp2 = new Course();

    // Loop through the faculty and prepare the view.
            foreach (var faculty in _faculties) {
                var viewFaculty = new MappedSelectedCourse {
                    FacultyName = faculty.name,
                    userId = faculty.userId
                };

                var sC = await SelectedCourseApi.Get(faculty.userId);
                if (sC is null) continue;
                sC.selectedCourseIds ??= new List<string>();
                viewFaculty.SelectedCourses = sC.selectedCourseIds
                        .Select(selectedCourseId => _courses
                            .Find(e => e.Id == selectedCourseId))
                        .ToList();
                viewFaculty.selectedCourseIds = sC.selectedCourseIds;

                var pC = await PreferredCourseApi.Get(faculty.userId);
                if (pC is null) continue;
                pC.preferredCourseIds ??= new List<string>();
                viewFaculty.PreferredCourses = pC.preferredCourseIds
                        .Select(preferredCourseId => _courses
                            .Find(e => e.Id == preferredCourseId))
                        .ToList();
                
                _viewFaculties.Add(viewFaculty);
            }
            StateHasChanged();
        }
    }

    private void Edit(MappedSelectedCourse viewFaculty) {
        viewFacultyObject = viewFaculty;
        _promptVisibility = true;
    }

    private void AddChoiceToList() {
        if (viewFacultyObject.SelectedCourses.Exists(e => e.Id == temp2.Id)) return;
        viewFacultyObject.SelectedCourses.Add(
            _courses.Find(e => e.Id == temp2.Id));
    }
    
    // Redundant Function, need to remove
    private void AddCourseToList() {
        if (viewFacultyObject.SelectedCourses.Exists(e => e.Id == temp.Id)) return;
        viewFacultyObject.SelectedCourses.Add(
            _courses.Find(e => e.Id == temp.Id));
    }

    private void RemoveFromList(Course course) {
        viewFacultyObject.SelectedCourses.RemoveAll(e => e.Id == course.Id);
    }

    private async void Set() {
        var selectedStrings = viewFacultyObject.SelectedCourses
            .Select(e => e.Id)
            .ToList();
        await SelectedCourseApi.Add(viewFacultyObject.userId, selectedStrings);
        _promptVisibility = false;
    }

    private void Hide() {
        _promptVisibility = false;
    }

}